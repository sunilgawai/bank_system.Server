generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique() // email address.
  password    String // password
  role        UserRole  @default(CUSTOMER)
  Customer    Customer? @relation(fields: [customer_id], references: [id])
  customer_id String?
}

model Customer {
  id            String     @id @default(uuid())
  first_name    String
  middle_name   String
  last_name     String
  phone         String     @unique()
  email         String     @unique()
  // password      String     @db.LongText()
  date_of_birth String
  gender        GenderType
  Accounts      Account[]
  Addresses     Address[]
  Documents     Document[]
  User          User[]
}

model Document {
  id              String        @id @default(uuid())
  document_type   document_type @default(ADHAAR)
  document_number String
  customerId      String?
  customer        Customer?     @relation(fields: [customerId], references: [id], map: "Document_customerId_fkey")
  Account         Account[]

  @@index([customerId], map: "Document_customerId_fkey")
}

enum document_type {
  PANCARD
  ADHAAR
  LICENSE
}

model Account {
  id                    String        @id @default(uuid())
  account_type          AccountType   @default(CURRENT)
  account_number        String        @unique()
  ifsc_code             IFSC          @default(BANK0007)
  account_balance       Float         @default(0.00)
  sent_transactions     Transaction[] @relation("TransactionSender")
  received_transactions Transaction[] @relation("TransactionReceiver")
  Customer              Customer?     @relation(fields: [customer_id], references: [id])
  customer_id           String?
  Document              Document      @relation(fields: [document_id], references: [id])
  document_id           String
}

model Transaction {
  id          String   @id @default(uuid())
  Sender      Account  @relation("TransactionSender", fields: [sender_id], references: [id])
  sender_id   String
  Receiver    Account  @relation("TransactionReceiver", fields: [receiver_id], references: [id])
  receiver_id String
  time        DateTime @default(now())
}

model Address {
  id          String       @id @default(uuid())
  type        address_type @default(REGULAR)
  country     Country?     @default(INDIA)
  state       String
  city        String
  district    String
  landmark    String
  Customer    Customer?    @relation(fields: [customer_id], references: [id], map: "Address_customerId_fkey")
  customer_id String?

  @@index([customer_id], map: "Address_customerId_fkey")
}

model City {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  districtid  Int?
  state_id    Int?
  description String  @db.Text
  status      String? @db.VarChar(10)
}

model District {
  districtid           Int    @id @default(autoincrement())
  district_title       String @db.VarChar(100)
  state_id             Int?
  district_description String @db.Text
  district_status      String @db.VarChar(10)
}

model State {
  state_id          Int    @id @default(autoincrement())
  state_title       String @db.VarChar(100)
  state_description String @db.Text
  status            String @db.VarChar(10)
}

enum address_type {
  REGULAR
  DEFAULT
}


enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum AccountType {
  CURRENT
  SAVING
  SALARY
  FIXED
  JOINT
}

enum IFSC {
  BANK0007
}

enum Country {
  INDIA
}

enum UserRole {
  ADMIN
  CUSTOMER
}
